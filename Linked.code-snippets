{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"LinkedList": {
		// 	"scope": "javascript,typescript",
		"prefix": "Linkedlist",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"#define lli long long int",
			"#define ull unsigned long long int",
			"#define mod 1000000007",
			"#define pq priority_queue",
			"#define pb push_back",
			"#define ld long double",
			"#define REP(x,n) for (int x = 0; x < n; x++)",
			"",
			"using namespace std;",
			"",
			"class ListNode {\n\tpublic:\n\t\tint val;\n\t\tListNode *next;\n\t\tListNode(int val) {",
			"\t\t\tthis->val = val;",
			"\t\t\tnext = NULL;",
			"\t\t}",
			"\t\tListNode* createLinkedList(vector<int> v) {",
			"\t\t\tListNode* list = new ListNode(v[0]);",
			"\t\t\tListNode* listcopy = list;",
			"\t\t\tfor (int x = 1; x < v.size(); x++) {",
			"\t\t\t\tListNode* node = new ListNode(v[x]);",
			"\t\t\t\tlist->next = node;",
			"\t\t\t\tlist = list->next;",
			"\t\t\t}",
			"\t\t\treturn listcopy;",
			"\t\t}",
			"\t\tvoid printLinkedList(ListNode* node) {",
			"\t\t\twhile (node != NULL) {",
			"\t\t\t\tcout << node->val << \"\t\";",
			"\t\t\t\tnode = node->next;",
			"\t\t\t}",
			"\t\t\tcout << endl;",
			"\t\t}",
			"};",
			"",
			"class Solution {",
			"\tpublic:",
			"\t\t$1",
			"",
			"};",
			"",
			"int main() {",
			"",
			"#ifndef ONLINE_JUDGE",
			"\tfreopen(\"Input1.txt\",\"r\", stdin);",
			"\tfreopen(\"Output1.txt\",\"w\", stdout);",
			"#endif",
			"",
			"\tvector<int> v{10, 20, 30};",
			"\tListNode* l1;",
			"\tl1 = l1->createLinkedList(v);",
			"\tl1->printLinkedList(l1);",
			"\tSolution ob;",
			"\t$1",
			"",
			"}"
		],
		"description": "Log output to console"
	}
}